// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Category Model (Main navigation categories)
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  families Family[]
  products Product[]

  @@map("categories")
}

// Family Model (Subcategories under each category)
model Family {
  id          String   @id @default(cuid())
  reference   String   @unique // e.g., "FAM-001"
  name        String
  slug        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  subfamilies Subfamily[]
  products    Product[]

  @@unique([categoryId, slug])
  @@map("families")
}

// Subfamily Model (Sub-subcategories under each family)
model Subfamily {
  id          String   @id @default(cuid())
  reference   String   @unique // e.g., "SUB-001"
  name        String
  slug        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  products Product[]

  @@unique([familyId, slug])
  @@map("subfamilies")
}

// Brand Model
model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  logo      String?
  website   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  @@map("brands")
}

// Product Model
model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?
  shortDescription String?
  sku             String?  @unique
  barcode         String?  @unique

  // Pricing
  price           Float
  originalPrice   Float?
  costPrice       Float?

  // Inventory
  inStock         Boolean  @default(true)
  stockQuantity   Int      @default(0)
  lowStockAlert   Int      @default(10)

  // Product Details
  weight          Float?
  dimensions      String?
  ingredients     String?
  usage           String?
  warnings        String?

  // SEO & Marketing
  metaTitle       String?
  metaDescription String?

  // Status
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  isOnSale        Boolean  @default(false)

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  categoryId    String?
  category      Category?   @relation(fields: [categoryId], references: [id])

  familyId      String?
  family        Family?     @relation(fields: [familyId], references: [id])

  subfamilyId   String?
  subfamily     Subfamily?  @relation(fields: [subfamilyId], references: [id])

  brandId       String?
  brand         Brand?      @relation(fields: [brandId], references: [id])

  // Product images
  images        ProductImage[]

  // Product reviews
  reviews       Review[]

  // Cart items
  cartItems     CartItem[]

  // Order items
  orderItems    OrderItem[]

  @@map("products")
}

// Product Images Model
model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// User Model
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  firstName   String
  lastName    String
  phone       String
  region      String
  dateOfBirth DateTime?
  gender      String?

  // Authentication
  password    String
  role        UserRole  @default(CLIENT)
  isVerified  Boolean   @default(false)
  isActive    Boolean   @default(true)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  addresses   Address[]
  reviews     Review[]
  cart        Cart?
  orders      Order[]

  @@map("users")
}

// Address Model
model Address {
  id          String  @id @default(cuid())
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String?
  postalCode  String
  country     String  @default("Tunisia")
  phone       String?
  isDefault   Boolean @default(false)

  // Relations
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders      Order[]

  @@map("addresses")
}

// Cart Model
model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

// Cart Item Model
model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  // Relations
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

// Review Model
model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Order Model
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)

  // Totals
  subtotal      Float
  taxAmount     Float       @default(0)
  shippingCost  Float       @default(0)
  discount      Float       @default(0)
  total         Float

  // Payment
  paymentMethod String?
  paymentStatus PaymentStatus @default(PENDING)
  paidAt        DateTime?

  // Shipping
  shippingMethod String?
  trackingNumber String?
  shippedAt      DateTime?
  deliveredAt    DateTime?

  // Notes
  notes         String?

  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id])

  addressId     String
  address       Address     @relation(fields: [addressId], references: [id])

  items         OrderItem[]

  @@map("orders")
}

// Order Item Model
model OrderItem {
  id        String @id @default(cuid())
  quantity  Int
  unitPrice Float
  total     Float

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Enums
enum UserRole {
  CLIENT
  ADMIN
  EMPLOYEE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
